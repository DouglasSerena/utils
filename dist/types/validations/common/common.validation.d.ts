import { IContainsOption } from "./contains.validation";
export declare type Typeof = "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function";
export declare const noContains: <T = string>(value: T, compare: string | RegExp, options?: IContainsOption) => boolean;
export declare const isEqual: (value: unknown, compare: unknown) => boolean;
export declare const isDifferent: (value: unknown, compare: unknown) => boolean;
export declare const isEqualNotStrict: (value: unknown, compare: unknown) => boolean;
export declare const isDifferentNotStrict: (value: unknown, compare: unknown) => boolean;
export declare const isFill: <T = unknown>(item: T | T[]) => boolean;
export declare const isTypeof: <GuardType = unknown>(value: unknown, type: Typeof) => value is GuardType;
export declare const isInstanceof: <T>(value: unknown, instance: T) => value is T[keyof T];
export declare const notIsInstanceof: <U, T>(value: U, instance: T) => value is Exclude<U, T[keyof T]>;
export declare const isFalse: (value: unknown) => boolean;
export declare const isTrue: (value: unknown) => boolean;
export declare const isString: (value: unknown) => value is string;
export declare const isObject: <T>(value: T) => value is T;
export declare const isArray: (value: unknown) => value is [];
export declare const isFunction: (value: unknown) => value is FunctionConstructor;
export declare const isBoolean: (value: unknown) => value is boolean;
export declare const isNull: (value: unknown) => value is null;
export declare const isUndefined: (value: unknown) => value is undefined;
export declare const isCpfOrCnpj: (value: string) => boolean;
